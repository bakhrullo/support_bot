from datetime import date

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from aiogram.types import InputFile

from tgbot.db.db_api import get_projects, get_agent, create_contract, check_contract, get_project_db, get_contracts
from tgbot.filters.back import BackFilter
from tgbot.filters.day import WeekdayFilter
from tgbot.keyboards.inline import *
from tgbot.misc.states import MainMenu, Project, Check, Certificate, Send, History, Percent
from tgbot.services.counter import count
from tgbot.services.didox import didox_create_doc, didox_get_token, get_info
from tgbot.services.pdf import pdf_create, pdf_create_percent, pdf_create_special


async def start(m: Message, config):
    user = await get_agent(config, m.from_user.id)
    await m.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {m.from_user.full_name} üëã\n"
                   f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –±–æ—Ç–µ Support Samarkand\n\n"
                   f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá", reply_markup=menu_kb(user["is_boss"]))
    await MainMenu.get_menu.set()


async def send(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=type_kb)
    await Send.get_type.set()


async def get_type(c: CallbackQuery, state: FSMContext):
    await state.update_data(type=c.data)
    await c.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª üìÅ", reply_markup=back_kb)
    await Send.next()


async def get_file(m: Message, state: FSMContext):
    await state.update_data(file=m.document.file_id)
    await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üìå", reply_markup=back_kb)
    await Send.next()


async def get_inn_send(m: Message, state: FSMContext, config):
    await m.answer("‚è≥")
    data = await state.get_data()
    doc = await m.bot.download_file_by_id(data["file"], destination_dir="files")
    inn = await didox_create_doc(config, doc.name, data["type"], m.text)
    if not inn:
        return await m.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå", reply_markup=back_kb)
    user = await get_agent(config, m.from_user.id)
    await m.bot.send_document(chat_id=config.tg_bot.channel_id, document=data["file"],
                              caption=f"üë§ –ê–≥–µ–Ω—Ç: {user['name']}\nüÜî –ù–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞: {user['uniq']}\nüìÉ –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞: {data['type']}\nüóÇ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {m.text}\n")
    await m.answer("–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç ‚úÖ\n"
                   "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
                   reply_markup=menu_kb(user["is_boss"]))
    await MainMenu.get_menu.set()


async def project(c: CallbackQuery, config):
    projects = await get_projects(c.from_user.id, config)
    await c.message.edit_text(f"–£ –≤–∞—Å {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n–° –∫–∞–∫–∏–º –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?",
                              reply_markup=contracts_kb(projects))
    await Project.get_project.set()


async def get_project(c: CallbackQuery, state: FSMContext, config):
    project_db = await get_project_db(c.data.split("_")[0], config)
    counter, agent = await count(config), await get_agent(config, c.from_user.id)
    key = f"-{agent['uniq']}"
    number = f"{counter}/{project_db['uniq']}{key if agent['uniq'] is not None else ''}"
    await state.update_data(number=number, name=c.data.split("_")[1], id=c.data.split("_")[0],
                            signature=project_db["signature"], is_special=project_db["is_special"])
    if project_db["is_special"]:
        await Project.next()
        return await c.message.edit_text(f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω ‚úÖ\n–í–∞—à –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:\n<b>{number}</b>"
                                         f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ üìë", reply_markup=doc_type_kb)
    await c.message.edit_text(f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω ‚úÖ\n–í–∞—à –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:\n\n<b>{number}</b>",
                              reply_markup=contract_conf_kb)
    await Project.get_conf.set()


async def get_doc_type(c: CallbackQuery, state: FSMContext):
    await state.update_data(doc_pdf=c.data)
    await c.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–æ—Ä ‚úçÔ∏è")
    await Project.get_inn.set()


async def get_conf(c: CallbackQuery):
    await c.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–æ—Ä ‚úçÔ∏è")
    await Project.next()


async def get_inn(m: Message, state: FSMContext, config):
    token = await didox_get_token(config)
    res = await get_info(config, m.text, token['token'])
    if res["inn"] is None:
        return await m.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå", reply_markup=back_kb)
    data = await state.get_data()
    text = f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:\n[{data['number']}]‚úÖ\n–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n[{m.text}]‚úÖ\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã:\n[{res['shortName']}]‚úÖ\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n[{data['name']}]‚úÖ\n"
    if data["is_special"]:
        text += f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞[{data['doc_pdf']}]‚úÖ\n"
    await m.answer(text, reply_markup=contract_conf_kb)
    await state.update_data(inn=m.text, company_info=res)
    await Project.next()


async def get_last_conf(c: CallbackQuery, state: FSMContext, config):
    await c.message.edit_text("‚è≥")
    data = await state.get_data()
    user = await get_agent(config, c.from_user.id)
    text =f"üë§ –ê–≥–µ–Ω—Ç: {user['name']}\nüì• –ù–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞: {user['uniq']}\nüÜî –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {data['number']}\nüóÇ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {data['inn']}\nüè≠ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã: {data['company_info']['shortName']}\nüìÉ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {data['name']}"
    # await create_contract(config, project=data['id'], agent=user['id'], firm=data['company_info']['shortName'],
    #                       inn=data['inn'], code=data['number'])
    if data["is_special"]:
        text += f"\nüìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {data['doc_pdf']}"
        pdf_create_special(data['number'], c.from_user.id, data['signature'], data['company_info'], data['doc_pdf'])
    else:
        pdf_create(data['number'], c.from_user.id, data['signature'], data['company_info'])
    # await didox_create_doc(config, f"{c.from_user.id}.pdf", data["number"], data["inn"])
    await c.bot.send_document(chat_id=config.tg_bot.channel_id, document=InputFile(f"{c.from_user.id}.pdf"), caption=text)
    await c.message.edit_text("–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç ‚úÖ\n"
                              "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
                              reply_markup=menu_kb(user["is_boss"]))
    await MainMenu.get_menu.set()


async def history(c: CallbackQuery, config):
    projects = await get_projects(c.from_user.id, config)
    await c.message.edit_text(f"–£ –≤–∞—Å {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n–ö–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
                              reply_markup=contracts_kb(projects))
    await History.get_contract.set()


async def get_history_projects(c: CallbackQuery, config):
    res = await get_contracts(c.from_user.id, config)
    if len(res) == 0:
        return await c.answer("–°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ùå")
    text = ""
    for i in res:
        text += f"üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {i['code']}\nüóÇ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {i['inn']}\nüè≠ –ò–º—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {i['firm']}\nüìÖ –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: {i['created_at'][0:10]}\n\n"
    await c.message.edit_text(text, reply_markup=back_kb)


async def check(c: CallbackQuery, config):
    projects = await get_projects(c.from_user.id, config)
    await c.message.edit_text(f"–£ –≤–∞—Å {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n–ö–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?",
                              reply_markup=contracts_kb(projects))
    await Check.get_contract.set()


async def get_check_contract(c: CallbackQuery, state: FSMContext):
    await state.update_data(name=c.data.split("_")[1], id=c.data.split("_")[0])
    await c.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù —Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –¥–æ–≥–æ–≤–æ—Ä –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úçÔ∏è")
    await Check.next()


async def get_check_inn(m: Message, state: FSMContext, config):
    data = await state.get_data()
    user = await get_agent(config, m.from_user.id)
    res = await check_contract(config, project=data["id"], inn=m.text)
    if res["status"] == "Not Found":
        await m.answer("–î–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ùå", reply_markup=menu_kb(user["is_boss"]))
    elif res["status"]:
        await m.answer("–ù–µ—Ç –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É", reply_markup=menu_kb(user["is_boss"]))
    elif not res["status"]:
        await m.answer(f"–ü–æ –¥–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä ‚Ññ {res['number']}",
                       reply_markup=menu_kb(user["is_boss"]))
    return await MainMenu.get_menu.set()


async def certificate(c: CallbackQuery, config):
    projects = await get_projects(c.from_user.id, config)
    await c.message.edit_text(f"–£ –≤–∞—Å {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n–î–ª—è –∫–∞–∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?",
                              reply_markup=contracts_kb(projects))
    await Certificate.get_certificate.set()


async def get_certificate(c: CallbackQuery, config):
    certificate_project = await get_project_db(c.data.split("_")[0], config)
    if certificate_project["file"] is None:
        return await c.answer("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
    await c.message.delete()
    await c.message.answer_document(document=certificate_project["file"], reply_markup=back_kb)


async def percent(c: CallbackQuery, config):
    projects = await get_projects(c.from_user.id, config)
    await c.message.edit_text(f"–£ –≤–∞—Å {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n–° –∫–∞–∫–∏–º –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?",
                              reply_markup=contracts_kb(projects, True))
    await Percent.get_project.set()


async def percent_get_project(c: CallbackQuery, state: FSMContext):
    await state.update_data(project_id=c.data.split("_")[0], project_uniq=c.data.split("_")[1],
                            project_name=c.data.split("_")[2])
    await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É %")
    await Percent.next()


async def get_percent(m: Message, state: FSMContext):
    if not m.text.isdigit():
        return await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ! ‚ùå")
    if not 1 <= int(m.text) <= 99:
        return await m.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–∞–π–æ–Ω–µ –æ—Ç 1 –¥–æ 99 ! ‚ùå")
    await state.update_data(percent=m.text)
    await m.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–æ–∫ üìÖ")
    await Percent.next()


async def get_day(m: Message, state: FSMContext):
    if not m.text.isdigit():
        return await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ! ‚ùå")
    await state.update_data(day=m.text)
    await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–æ—Ä ‚úçÔ∏è")
    await Percent.next()


async def get_inn_percent(m: Message, state: FSMContext, config):
    token = await didox_get_token(config)
    res = await get_info(config, m.text, token['token'])
    try:
        if res["inn"] is None:
            return await m.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå", reply_markup=back_kb)
    except:
        return await m.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå", reply_markup=back_kb)
    counter, agent = await count(config), await get_agent(config, m.from_user.id)
    data = await state.get_data()
    key = f"-{agent['uniq']}"
    number = f"{counter}/{data['project_uniq']}{key if agent['uniq'] is not None else ''}"
    await m.answer(
        f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:\n[{number}]‚úÖ\n–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n[{m.text}]‚úÖ\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã:\n[{res['shortName']}]‚úÖ\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n[{data['project_name']}]‚úÖ\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=contract_conf_kb)
    await state.update_data(inn=m.text, company_info=res, number=number)
    await Percent.next()


async def get_percent_confirm(c: CallbackQuery, state: FSMContext, config):
    await c.message.edit_text("‚è≥")
    data = await state.get_data()
    user = await get_agent(config, c.from_user.id)
    await create_contract(config, project=data['project_id'], agent=user['id'],
                          firm=data['company_info']['shortName'], inn=data['inn'], code=data['number'])
    pdf_create_percent(data['number'], c.from_user.id, data['signature'], data['company_info'], data['percent'],
                       data['day'])
    await didox_create_doc(config, f"{c.from_user.id}.pdf", data["number"], data["inn"])
    await c.bot.send_document(chat_id=config.tg_bot.channel_id, document=InputFile(f"{c.from_user.id}.pdf"), caption=
    f"üë§ –ê–≥–µ–Ω—Ç: {user['name']}\nüì• –ù–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞: {user['uniq']}\nüÜî –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {data['number']}\nüóÇ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {data['inn']}\nüè≠ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã: {data['company_info']['shortName']}\nüìÉ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {data['name']}")
    await c.message.edit_text("–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç ‚úÖ\n"
                              "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
                              reply_markup=menu_kb(user["is_boss"]))
    await MainMenu.get_menu.set()


async def back(c: CallbackQuery, state: FSMContext, config):
    user = await get_agent(config, c.from_user.id)
    if str(await state.get_state()) == "Project:get_conf" or "Project.get_doc_type":
        data = await state.get_data()
        await c.bot.send_message(config.tg_bot.channel_id, f"–î–æ–≥–æ–≤–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É {data['number']} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
    await c.message.delete()
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb(user["is_boss"]))
    return await MainMenu.get_menu.set()


def register_admin(dp: Dispatcher):
    dp.register_message_handler(start, WeekdayFilter(allow_weekdays=True), commands=["start"], state="*", is_admin=True)
    dp.register_callback_query_handler(project, WeekdayFilter(allow_weekdays=True), Text(equals="contract"),
                                       state=MainMenu.get_menu, is_admin=True)
    dp.register_callback_query_handler(percent, WeekdayFilter(allow_weekdays=True), Text(equals="percent"),
                                       state=MainMenu.get_menu, is_admin=True)
    dp.register_callback_query_handler(percent_get_project, WeekdayFilter(allow_weekdays=True),
                                       state=Percent.get_project, is_admin=True)
    dp.register_message_handler(get_percent, WeekdayFilter(allow_weekdays=True), state=Percent.get_percent,
                                is_admin=True)
    dp.register_message_handler(get_day, WeekdayFilter(allow_weekdays=True), state=Percent.get_day, is_admin=True)
    dp.register_message_handler(get_inn_percent, WeekdayFilter(allow_weekdays=True), state=Percent.get_inn,
                                is_admin=True)
    dp.register_callback_query_handler(get_percent_confirm, WeekdayFilter(allow_weekdays=True),
                                       state=Percent.get_last_conf, is_admin=True)
    dp.register_callback_query_handler(get_doc_type, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Project.get_doc_type, is_admin=True)
    dp.register_callback_query_handler(send, WeekdayFilter(allow_weekdays=True),
                                       Text(equals="send"), state=MainMenu.get_menu, is_admin=True)
    dp.register_callback_query_handler(get_type, WeekdayFilter(allow_weekdays=True), BackFilter(), state=Send.get_type,
                                       is_admin=True)
    dp.register_callback_query_handler(check, WeekdayFilter(allow_weekdays=True), Text(equals="check"),
                                       state=MainMenu.get_menu, is_admin=True)
    dp.register_callback_query_handler(history, WeekdayFilter(allow_weekdays=True), Text(equals="history"),
                                       state=MainMenu.get_menu, is_admin=True)
    dp.register_callback_query_handler(get_history_projects, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=History.get_contract, is_admin=True)
    dp.register_callback_query_handler(certificate, WeekdayFilter(allow_weekdays=True), Text(equals="certificate"),
                                       state=MainMenu.get_menu, is_admin=True)
    dp.register_message_handler(get_file, WeekdayFilter(allow_weekdays=True), state=Send.get_file, is_admin=True,
                                content_types="document")
    dp.register_message_handler(get_inn_send, WeekdayFilter(allow_weekdays=True), state=Send.get_inn, is_admin=True)
    dp.register_callback_query_handler(get_certificate, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Certificate.get_certificate, is_admin=True)
    dp.register_callback_query_handler(get_check_contract, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Check.get_contract, is_admin=True)
    dp.register_callback_query_handler(get_project, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Project.get_project, is_admin=True)
    dp.register_callback_query_handler(get_conf, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Project.get_conf, is_admin=True)
    dp.register_message_handler(get_inn, WeekdayFilter(allow_weekdays=True), state=Project.get_inn, is_admin=True)
    dp.register_message_handler(get_check_inn, WeekdayFilter(allow_weekdays=True), state=Check.get_inn, is_admin=True)
    dp.register_callback_query_handler(get_last_conf, WeekdayFilter(allow_weekdays=True), BackFilter(),
                                       state=Project.get_last_conf, is_admin=True)
    dp.register_callback_query_handler(back, WeekdayFilter(allow_weekdays=True), state="*", is_admin=True)
